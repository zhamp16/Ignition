"""
Sepasoft Material Settings Copy Library

This module provides functions to copy material operation settings between lines in Sepasoft MES.
It includes helper functions to retrieve materials from folders and lines from equipment areas.

Author: Generated by Claude Code
Date: 2025-10-29
"""


def copyLineMaterialSettings(sourcePath, targetPaths, materialNames):
    """
    Copy Sepasoft material operation settings from one source line to multiple target lines.

    Args:
        sourcePath (str): Equipment path of the source line (e.g., 'Acushnet\\Ball Plant 03\\OPP\\Line 08')
        targetPaths (list): List of equipment paths for target lines
        materialNames (list): List of material names to process

    Returns:
        dict: Summary of operations performed with success/failure counts

    Example:
        sourcePath = 'Acushnet\\Ball Plant 03\\OPP\\Line 08'
        targetPaths = ['Acushnet\\Ball Plant 03\\ASB\\ASB_01', 'Acushnet\\Ball Plant 03\\ASB\\ASB_02']
        materialNames = ['2019 ProV1', '2020 ProV1']

        result = copyLineMaterialSettings(sourcePath, targetPaths, materialNames)
        print result
    """

    results = {
        'successful': [],
        'failed': [],
        'totalProcessed': 0,
        'totalSuccess': 0,
        'totalFailed': 0
    }

    print "=" * 80
    print "COPY MATERIAL SETTINGS"
    print "=" * 80
    print "Source Line: %s" % sourcePath
    print "Target Lines: %d" % len(targetPaths)
    print "Materials: %d" % len(materialNames)
    print "=" * 80
    print ""

    # Process each material
    for materialName in materialNames:
        for targetPath in targetPaths:
            results['totalProcessed'] += 1

            try:
                print "\n" + "=" * 80
                print "Processing: %s -> %s" % (materialName, targetPath.split('\\')[-1])
                print "=" * 80

                # Copy settings for this material and target
                _copySingleMaterialSettings(materialName, sourcePath, targetPath)

                results['successful'].append({
                    'material': materialName,
                    'targetPath': targetPath
                })
                results['totalSuccess'] += 1

                print "\n[SUCCESS] Material '%s' settings copied to %s" % (materialName, targetPath.split('\\')[-1])

            except Exception as e:
                results['failed'].append({
                    'material': materialName,
                    'targetPath': targetPath,
                    'error': str(e)
                })
                results['totalFailed'] += 1

                print "\n[FAILED] Material '%s' to %s: %s" % (materialName, targetPath.split('\\')[-1], str(e))
                import traceback
                traceback.print_exc()

    # Print summary
    print "\n" + "=" * 80
    print "SUMMARY"
    print "=" * 80
    print "Total Processed: %d" % results['totalProcessed']
    print "Successful: %d" % results['totalSuccess']
    print "Failed: %d" % results['totalFailed']
    print "=" * 80

    return results


def _copySingleMaterialSettings(materialName, sourcePath, targetPath):
    """
    Internal function to copy settings for a single material from source to target.

    Args:
        materialName (str): Name of the material
        sourcePath (str): Source line equipment path
        targetPath (str): Target line equipment path
    """

    # Load the material definition
    matLink = system.mes.getMESObjectLinkByName('MaterialDef', materialName)

    # Load the existing operation for the source line
    sourceOpName = materialName + '-' + sourcePath.replace('\\', ':')

    # Get settings from source
    settings = {}
    changeoverSettings = {}

    # Extract target equipment name from path
    targetEquipmentName = targetPath.split('\\')[-1]

    # Read source settings
    try:
        sourceOpDef = system.mes.loadMESObject(sourceOpName, 'OperationsDefinition')

        # Get changeover segment
        sourceChangeoverSegUUID = sourceOpDef.getComplexProperty('SegmentDependency', 'Changeover Dependency').getSegmentRefUUID()
        sourceChangeoverSeg = system.mes.loadMESObject(sourceChangeoverSegUUID)

        # Get production segment
        sourceOpSegUUID = sourceOpDef.getComplexProperty('SegmentDependency', 'Production Dependency').getSegmentRefUUID()
        sourceOpSeg = system.mes.loadMESObject(sourceOpSegUUID)

        # Get TrackProgressBy from Operations Definition
        settings['trackProgressBy'] = sourceOpDef.getTrackProgressBy()

        # ========== CHANGEOVER SETTINGS FROM TRIGGERS ==========
        # Get changeover end trigger (this has duration, mode, and auto)
        endTriggers = sourceChangeoverSeg.getSegmentEndTriggers()
        if len(endTriggers) > 0:
            endTrigger = endTriggers[0]
            changeoverSettings['fixedDuration'] = endTrigger.getFixedDuration()
            changeoverSettings['mode'] = endTrigger.getMode()
            changeoverSettings['timeout'] = endTrigger.getTimeout()

            # Get Auto property from child properties
            childProps = endTrigger.getChildProperties()
            if 'Auto' in childProps:
                autoValue = str(childProps['Auto']).split('=')[-1]
                changeoverSettings['auto'] = autoValue.lower() == 'true'

            print "  Changeover End Trigger:"
            print "    - Mode: " + str(changeoverSettings['mode'])
            print "    - Fixed Duration: " + str(changeoverSettings['fixedDuration']) + " minute(s)"
            print "    - Auto End: " + str(changeoverSettings.get('auto', 'N/A'))
            print "    - Timeout: " + str(changeoverSettings['timeout'])

        # Get changeover begin trigger
        beginTriggers = sourceChangeoverSeg.getSegmentBeginTriggers()
        if len(beginTriggers) > 0:
            beginTrigger = beginTriggers[0]
            changeoverSettings['beginMode'] = beginTrigger.getMode()
            changeoverSettings['initialDelay'] = beginTrigger.getInitialDelay()

            print "  Changeover Begin Trigger:"
            print "    - Mode: " + str(changeoverSettings['beginMode'])
            print "    - Initial Delay: " + str(changeoverSettings['initialDelay'])

        # ========== CHANGEOVER PRODUCTION SETTINGS ==========
        changeoverCount = sourceChangeoverSeg.getComplexPropertyCount('ProductionSettings')
        if changeoverCount > 0:
            changeoverProdSet = sourceChangeoverSeg.getComplexProperty('ProductionSettings', 0)
            changeoverSettings['changeoverModeUUID'] = changeoverProdSet.getModeRefUUID()
            changeoverSettings['changeoverModeType'] = changeoverProdSet.getModeRefType()

            try:
                changeoverSettings['idleModeUUID'] = changeoverProdSet.getIdleModeRefUUID()
                changeoverSettings['idleModeType'] = changeoverProdSet.getIdleModeRefType()
            except:
                pass

        # ========== IDLE SETTINGS ==========
        prodCount = sourceOpSeg.getComplexPropertyCount('ProductionSettings')
        if prodCount > 0:
            prodSet = sourceOpSeg.getComplexProperty('ProductionSettings', 0)
            try:
                settings['idleModeUUID'] = prodSet.getIdleModeRefUUID()
                settings['idleModeType'] = prodSet.getIdleModeRefType()
            except:
                pass

        # ========== MATERIAL OUT PROPERTIES ==========
        matProp = sourceOpSeg.getComplexProperty('Material', 'Material Out')
        if matProp:
            settings['scheduleRate'] = matProp.getRate()
            settings['units'] = matProp.getUnits()
            settings['ratePeriod'] = matProp.getRatePeriod()

        # ========== PRODUCTION SETTINGS ==========
        prodSettingsList = []
        count = sourceOpSeg.getComplexPropertyCount('ProductionSettings')

        for i in range(count):
            prodSet = sourceOpSeg.getComplexProperty('ProductionSettings', i)

            settingData = {
                'equipmentPath': prodSet.getEquipmentRefProperty(),
                'oeeRate': prodSet.getOEERate(),
                'outfeedUnits': prodSet.getOutfeedUnits(),
                'infeedUnits': prodSet.getInfeedUnits(),
                'infeedScale': prodSet.getInfeedScale(),
                'rejectScale': prodSet.getRejectScale(),
                'packageCount': prodSet.getPackageCount(),
                'modeRefUUID': prodSet.getModeRefUUID(),
                'modeRefType': prodSet.getModeRefType(),
                'idleModeRefUUID': prodSet.getIdleModeRefUUID(),
                'idleModeRefType': prodSet.getIdleModeRefType(),
                'strictTagMode': prodSet.getStrictTagMode() if hasattr(prodSet, 'getStrictTagMode') else False,
            }

            prodSettingsList.append(settingData)

    except Exception as e:
        print "  Error reading source settings: " + str(e)
        import traceback
        traceback.print_exc()
        raise Exception("Failed to read source settings: " + str(e))

    # Get the target equipment MES object for setting infeed/outfeed references
    try:
        targetEquipmentLink = system.mes.getMESObjectLinkByEquipmentPath(targetPath)
        targetEquipmentUUID = targetEquipmentLink.getMESObjectUUID()
        targetEquipmentType = targetEquipmentLink.getMESObjectTypeName()
    except Exception as e:
        print "  Could not get target equipment link: " + str(e)
        targetEquipmentUUID = None
        targetEquipmentType = None

    # Create or get operation for target line
    targetOperList = system.mes.oee.createMaterialProcessSegment(matLink, targetPath)

    # Apply settings to target line
    for opSeg in targetOperList:
        # Set TrackProgressBy on OperationsDefinition
        if opSeg.getMESObjectTypeName() == 'OperationsDefinition':
            opSeg.setTrackProgressBy(settings['trackProgressBy'])
            print "  Set TrackProgressBy: " + str(settings['trackProgressBy'])

        # ========== APPLY CHANGEOVER SETTINGS ==========
        if opSeg.getMESObjectTypeName() == 'OperationsSegment':
            if '_CO' in opSeg.getName():
                print "  Applying Changeover Settings..."

                # Apply changeover end trigger settings (duration, mode, and auto)
                targetEndTriggers = opSeg.getSegmentEndTriggers()
                if len(targetEndTriggers) > 0 and changeoverSettings:
                    targetEndTrigger = targetEndTriggers[0]

                    if 'fixedDuration' in changeoverSettings:
                        targetEndTrigger.setFixedDuration(changeoverSettings['fixedDuration'])
                        print "    - Set Fixed Duration: " + str(changeoverSettings['fixedDuration'])

                    if 'mode' in changeoverSettings:
                        targetEndTrigger.setMode(changeoverSettings['mode'])
                        print "    - Set Mode: " + str(changeoverSettings['mode'])

                    if 'auto' in changeoverSettings:
                        # Set Auto property through child properties
                        childProps = targetEndTrigger.getChildProperties()
                        if 'Auto' in childProps:
                            autoChild = childProps['Auto']
                            autoChild.setValue(changeoverSettings['auto'])
                            print "    - Set Auto End: " + str(changeoverSettings['auto'])

                    if 'timeout' in changeoverSettings:
                        targetEndTrigger.setTimeout(changeoverSettings['timeout'])
                        print "    - Set Timeout: " + str(changeoverSettings['timeout'])

                    # Save the trigger back
                    opSeg.setPropertyValue('TriggerSegEnd', targetEndTrigger)

                # Apply changeover begin trigger settings
                targetBeginTriggers = opSeg.getSegmentBeginTriggers()
                if len(targetBeginTriggers) > 0 and 'initialDelay' in changeoverSettings:
                    targetBeginTrigger = targetBeginTriggers[0]
                    targetBeginTrigger.setInitialDelay(changeoverSettings['initialDelay'])
                    print "    - Set Initial Delay: " + str(changeoverSettings['initialDelay'])
                    opSeg.setPropertyValue('TriggerSegBegin', targetBeginTrigger)

                # Apply ProductionSettings for changeover modes
                changeoverCount = opSeg.getComplexPropertyCount('ProductionSettings')
                if changeoverCount > 0 and changeoverSettings:
                    changeoverProdSet = opSeg.getComplexProperty('ProductionSettings', 0)

                    if 'changeoverModeUUID' in changeoverSettings:
                        changeoverProdSet.setModeRefUUID(changeoverSettings['changeoverModeUUID'])
                        changeoverProdSet.setModeRefType(changeoverSettings['changeoverModeType'])
                        print "    - Set Changeover Mode"

                    if 'idleModeUUID' in changeoverSettings and changeoverSettings['idleModeUUID']:
                        changeoverProdSet.setIdleModeRefUUID(changeoverSettings['idleModeUUID'])
                        changeoverProdSet.setIdleModeRefType(changeoverSettings['idleModeType'])
                        print "    - Set Idle Mode"

                    opSeg.setPropertyValue('ProductionSettings', changeoverProdSet)

        # ========== APPLY PRODUCTION SETTINGS ==========
        if opSeg.getMESObjectTypeName() == 'OperationsSegment':
            if '_CO' not in opSeg.getName():
                print "  Applying Production Settings..."

                # Set Material Out properties
                matProp = opSeg.getComplexProperty('Material', 'Material Out')
                if matProp:
                    matProp.setRate(settings['scheduleRate'])
                    matProp.setUnits(settings['units'])
                    matProp.setRatePeriod(settings['ratePeriod'])
                    print "    - Set Material Out properties"

                # Set Production Settings
                targetCount = opSeg.getComplexPropertyCount('ProductionSettings')

                for i in range(targetCount):
                    targetProdSet = opSeg.getComplexProperty('ProductionSettings', i)

                    if len(prodSettingsList) > 0:
                        sourceSetting = prodSettingsList[0]

                        targetProdSet.setOEERate(sourceSetting['oeeRate'])
                        targetProdSet.setOutfeedUnits(sourceSetting['outfeedUnits'])
                        targetProdSet.setInfeedUnits(sourceSetting['infeedUnits'])
                        targetProdSet.setInfeedScale(sourceSetting['infeedScale'])
                        targetProdSet.setRejectScale(sourceSetting['rejectScale'])
                        targetProdSet.setPackageCount(sourceSetting['packageCount'])

                        # Set mode references
                        if 'modeRefUUID' in sourceSetting and 'modeRefType' in sourceSetting:
                            targetProdSet.setModeRefUUID(sourceSetting['modeRefUUID'])
                            targetProdSet.setModeRefType(sourceSetting['modeRefType'])

                        if 'idleModeRefUUID' in sourceSetting and 'idleModeRefType' in sourceSetting:
                            targetProdSet.setIdleModeRefUUID(sourceSetting['idleModeRefUUID'])
                            targetProdSet.setIdleModeRefType(sourceSetting['idleModeType'])

                        # Set infeed/outfeed equipment to TARGET line
                        if targetEquipmentUUID and targetEquipmentType:
                            targetProdSet.setInfeedEquipmentRefUUID(targetEquipmentUUID)
                            targetProdSet.setInfeedEquipmentRefType(targetEquipmentType)
                            targetProdSet.setOutfeedEquipmentRefUUID(targetEquipmentUUID)
                            targetProdSet.setOutfeedEquipmentRefType(targetEquipmentType)
                            print "    - Set infeed/outfeed equipment to: " + targetEquipmentName

                        opSeg.setPropertyValue('ProductionSettings', targetProdSet)

    # Save all changes
    print "  Saving changes..."
    system.mes.saveMESObjects(targetOperList)


def getMaterialsInFolder(folderPath):
    """
    Get all material names in a given material folder.

    Args:
        folderPath (str): Name of the material folder (e.g., 'Golfballs')
                         Can also be a path like 'Material Root\\Golfballs'

    Returns:
        list: List of material names in the folder

    Example:
        materials = getMaterialsInFolder('Golfballs')
        print materials  # ['2019 ProV1', '2020 ProV1', ...]
    """

    try:
        # Try to load the folder as a MaterialDef object
        # First try as-is, then try with Material Root prefix
        folder = None
        pathsToTry = [folderPath]

        # If not already prefixed, try with Material Root prefix
        if not folderPath.startswith('Material Root'):
            pathsToTry.append('Material Root\\' + folderPath)
            pathsToTry.append('Material Root/' + folderPath)

        for path in pathsToTry:
            try:
                folderLink = system.mes.getMESObjectLinkByName('MaterialDef', path)
                if folderLink:
                    folder = system.mes.loadMESObject(folderLink.getMESObjectUUID())
                    print "Loaded folder: " + path
                    break
            except:
                continue

        if not folder:
            raise Exception("Could not find material folder '%s'" % folderPath)

        # Get child materials
        children = folder.getChildCollection()

        materialNames = []
        for childKey, childMat in children.items():
            materialName = childMat.getName()
            materialNames.append(materialName)

        print "Found %d materials in folder '%s'" % (len(materialNames), folderPath)
        return materialNames

    except Exception as e:
        print "Error getting materials from folder '%s': %s" % (folderPath, str(e))
        import traceback
        traceback.print_exc()
        return []


def getLinesInArea(areaPath):
    """
    Get all line equipment paths within a given area.

    Args:
        areaPath (str): Equipment path to the area (e.g., 'Acushnet\\Ball Plant 03\\ASB')

    Returns:
        list: List of line equipment paths in the area

    Example:
        lines = getLinesInArea('Acushnet\\\\Ball Plant 03\\\\ASB')
        print lines  # ['Acushnet\\Ball Plant 03\\ASB\\ASB_01', 'Acushnet\\Ball Plant 03\\ASB\\ASB_02', ...]
    """

    try:
        # Get equipment link for the area
        areaLink = system.mes.getMESObjectLinkByEquipmentPath(areaPath)
        areaUUID = areaLink.getMESObjectUUID()

        # Load the area equipment object
        areaEquipment = system.mes.loadMESObject(areaUUID)

        # Get child equipment (lines)
        children = areaEquipment.getChildCollection()

        linePaths = []
        for childKey, childEquip in children.items():
            # The key in getChildCollection() is a UUID, not the name
            # We need to get the name from the child equipment object
            childName = childEquip.getName()

            # Construct the full equipment path for this child
            childPath = areaPath + '\\' + childName
            linePaths.append(childPath)

        print "Found %d lines in area '%s'" % (len(linePaths), areaPath)
        print "  Lines: %s" % ', '.join([path.split('\\')[-1] for path in linePaths])
        return linePaths

    except Exception as e:
        print "Error getting lines from area '%s': %s" % (areaPath, str(e))
        import traceback
        traceback.print_exc()
        return []
